二分查找:  在一个有序数组中, 进行折半查找 指定元素
步骤:
1.  定义两个变量   定义查找的范围 min=0   max=长度-1
2.  计算中间值= (min+max)/2
3.  找出中间值和 number(目标值) 做比较
    如果相同  中间值 就是查找的目标值
    如果不相同  中间值>number   向左查找   对左边的元素再进行折半
                                 min的值保持不变  max=中间值-1
    如果不相同  中间值<number   向右查找
                          max保持不变    min=中间值+1
4. 根据改变后的max和min 再重新计算中间值  无限重复3的步骤


排序算法:   时间复杂度 和空间复杂度   稳定性
时间:  表示执行排序算法时消耗的时间
空间:  排序算法在运行过程中占用存储空间的大小
稳定:  排序前后相同的元素 原来的位置是否改变,  如果改不了就是不稳定的
如果不改变就是稳定的
          时间      空间      稳定性
选择:     0(n^2)    0(1)      不稳定
冒泡:     0(n^2)    0(1)      稳定
插入:     0(n^2)    0(1)      稳定
快速:     0(nlogn)  0(nlogn)  不稳定
二分:     0(logn)

O(1): 表示最低复杂度 一般是常量值1
     复杂度不会受到数据量的大小改变而改变(哈希算法)
0(n): 数据量增大n倍   复杂度耗时也增大n倍  (一重循环变量)
0(logn): 当数据量增大到n倍时   n=256   logn是2 的底数
       2的把8次方=256    logn 目前 表示 耗时 增大了8倍
       二分查找就是 无限折半查找 256个数据只要查询8次
0(n^2) :  对n个数实现排序   需要对n*n进行查询（冒泡排序）
0(nlogn): 就是n 和logn相乘   当数据量增大256   耗时=256*8=2048
          (快速排序)

数组插入: 由于数组长度是固定的 如果想插入元素 只能定义新的数组
      重新保存元素

案例： 有一个数组，元素是有序的  手动输入一个元素
       插入数组中  还要保证数组元素的顺序

       int[] nums=new int[5];  10 20 30 40 50








