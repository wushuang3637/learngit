1.定义ArrayList集合，存入如下字符串：“abc”，“123”，“java”，“mysql”，“别跑啊”
   遍历集合，将长度小于4的元素左边填充字符串0，并在控制台打印输出修改后集合中所有元素
**输出结果格式： ** [0abc,0123,java,mysql,0别跑啊]

实现斗地主随机发牌的功能 一共54张牌
   牌的花色分为   梅花   红桃   黑桃  方片
   牌有  3  4 5 6 7 8 9 10 J  Q K  A  2  大王 小王
   随机发给两个农民 和一个地主      地主 多三张牌
   最后显示每人的牌的结果


Set
3.双色球规则：双色球每注投注号码由6个红色球号码和1个蓝色球号码组成。
  红色球号码从1—33中选择；蓝色球号码从1—16中选择；请随机生成一注双色
  球号码。（要求同色号码不重复）
  自己手动输入自己投注的双色球号码   与随机产生的双色球比较
  获奖规则如下
  3个红色球      10元                          六等奖
  4个红色球      50元                          五等奖
  4个红色球+蓝色球      200元           四等奖
  5个红色球      500元                        三等奖
  5个红色球+蓝色球   5000元             二等级
  6个红色球+蓝色球   100000元         一等奖

========================================================
集合:
Collection 父接口
     set:
     list:  有序  可以重复
map
区别 面试题
ArrayList    数组   查询快增删慢   线程不安全的  运行效率快
LinkedList   链表   查询慢增删快   线程不安全的  运行效率快
Vector       数组   查询快增删慢   线程安全的  运行效率慢

Set集合: 也是一个接口  无序   元素不能重复
Set  set=new 实现类();
Set实现类:
1. HashSet:  通过HashCode(哈希码)保存，可以使元素实现唯一 没有顺序
             线程不安全的   效率高    比较常用
2. TreeSet:  基于树状结构保存，实现排序功能  默认支持自然排序(对于基本类型默认升序
 对于String  先比较第一位 二位...  如果是对象排序 默认是排序不了的
 不过可以实现比较器对象 自定义比较规则就可以排序对象了)
3. LinkedHashSet:  相比HashSet  多了链表功能


HashSet底层实现: 就是HashMap    面试题
底层原理: 数组+链表+红黑树   如何保证元素不重复?
hashSet中的元素都是保存哈希桶(数组), 先去 == 判断 是否是一个对象
如果相同  认为是一个对象  所以会直接替换原来的值
如果不相同  再判断HashCode    因为hashSet 会把所有哈希码相同的值
存在同一个桶中   如果HashCode 不同认为是新的元素  存在新的桶中
如果HashCode 相同  再判断equals 查看里面的值是否一致
如果最后里面的值一致  则会替换原来的值    如果值不一致  还需要保存
在同一个位置  也不能替换  所以在当前那个哈希桶下面 拼一个链表保存
链表如果存储值时 长度超过8位    会转换成  红黑树
如果红黑树 值小于6位  有可以变成 链表

HashMap 实现原理  就是上面的原理


TreeSet:    元素是唯一   可以排序
1.基本类型 支持自然排序 按照升序排列
2.String   按照每个字符转换Ascii 进行比较
3.对象  默认不支持排序  TreeSet  不知道比较规则
 但是可以实现比较器对象

比较器对象区别
1. Comparator:也叫外部比较方式  没有改变类的结构  可以单独定义一个类
实现Comparator接口 重写Compare方法定义规则，
也可以通过匿名内部类的方式  也可以通过Lambda方式实现
相比内部比较更加灵活
2. Comparable:也叫内部比较方式 让需要比较类内部实现该接口 同时重写CompareTo()
里面实现比较规则

Map集合: 它是一个接口  不是Collection子接口
     底层结构基于键(key)--值(value)方式
     key: 是唯一的 没有顺序的  value: 没有要求

实现类:
HashMap: 它是HashSet的底层实现  key唯一  无序       线程不安全的
          key 允许为null   扩容机制...
HashTable: 底层结构类似于HashMap  都是基于HashCode  线程安全的
          key 不允许为null  扩容机制...
TreeMap: 它是TreeSet底层实现  参考TreeSet
支持自然排序  基本  String  对象


