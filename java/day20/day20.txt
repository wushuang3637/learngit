冒泡：两两比较
for(int i=0;i<X.length-1;i++){
    for(int j=0;j<x.length-1-i;j++){
    }
}
选择: 第一个和其他人  第二个其他人 ...
for(int i=0;i<x.length-1;i++){
    for(int j=i;j<x.length-1;j++){
    }
}
插入: 有序部分 待插入部分
20 10 3 70  60
20---10
10 20 -----3
3 10 20 ---70
for(int i=1;i<x.length;i++){
    for(int j=i;j>0;j--){
        if(x[j]<x[j-1]){
        }
    }
}
二分查找: 必须建立在有序数组   每次获取中间的元素(无限折半查找)
x==>有序数组
int min=0;
int max=x.length-1;
while(min<=max){
   int middle=(min+max)/2;
   if(x[middle]>目标元素){
      max=middle-1;
   }else if(x[middle]<目标元素){
      min=middle+1;
   }else{
       return middle;
   }
}
值得互换  a b
临时变量
int temp=a;   a=b;     b=temp;
+-
a=a+b;
b=a-b;
a=a-b;
*/
a=a*b;
b=a/b;
a=a/b;
^
a=a^b;
b=a^b;
a=a^b;

请你实现一个龟兔赛跑  利用线程
请你实现一个消费者和生成者之间的关系  利用线程


通过线程实现消费者和生产者购买商品的功能:
定义一个类产品类：属性 产品名称   最大数量   当前数量
       一个消费者线程类：属性 产品类对象
       一个生产者线程类:  属性  产品类对象
       一个测试类：初始化，运行
要求:生产者线程，当 当前数量<最大数量时候.  生产者要进行生产.提示生产数量和当前数量
        生产结束后,提示消费者可以购买。

        消费者线程, 消费者购买商品数量随机数而定，不能超过商品最大数量,如果购买数量大于商品当前数量.
        需要提示 购买的数量，库存不足。   呼叫生产者开始生产物品
        如果购买的商品数量小于商品当前数量则。正常购买 ，提示购买的数量和剩余数量

提示:生产者和消费者公用一个产品类对象
================================================================
I/O:
System.out.print()     ==>o
System.in======>i
javaIO: 通过java对象文件对象进行一系列操作， 可以对
文件(文件名 路径 判断等... 大小, 读取和 写入)
JavaIO流: java中提供了 对于操作文件的这些类 简称为IO流

IO流分类:
根据流向:  输入流和 输出流
根据单位:  字节流和 字符流
根据功能:  节点流和 处理流

Java IO 流  四大父类
字节输入流: 通过字节为单位  对文件进行读取  InputStream
字节输出流: 通过字节为单位  对文件进行写入  OutputStream
字符输入流: 通过字符为单位  对文件进行读取  Reader
字符输出流  通过字符为单位  对文件进行写入  Writer

字节流和字符流区别? ----面试题
字节流: 可以读取写入任何内容  文本 压缩包 视频 音频 图片...
        只不过不适合读取文本内容
        因为文本包括了中文  utf-8 ==>3个字节  GBK==>2个字节
        所以通过字节读取中文 可能会出现乱码
字符流: 只适合读取文本内容 不能读取图片 视频...
        一个汉字就是一个字符  不会出现乱码

File 类
java.io.File 泛指文件或者目录, 可以提供了对于文件一些基本操作
(路径 大小 文件名 创建 删除等....)  但是有一个点,不能文件的内容
进行操作(读取和写入)











