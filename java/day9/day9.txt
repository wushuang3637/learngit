sc201101作业：
基础题:
1.  手写代码拍照上传    插入算法和 二分查找和单例模式
2. 员工抽象类
包含3个属性：工号，姓名，工资。
一个抽象方法：工作描述（例如：不同员工有不同的工作内容）
项目经理子类    另外还有一个奖金属性       普通方法：踢足球
程序员子类    普通方法：看书
测试类：测试经理和员工
3.  定义一个类   保证他只能创建出11个对象

选做题
1.利用接口做参数，写个计算器，能完成+-*/运算
（1）定义一个接口Compute含有一个方法int computer(int n,int m);
（2）设计四个类分别实现此接口，完成+-*/运算
（3）设计一个类UseCompute，含有方法：public void useCom(Compute com, int one, int two)
此方法要求能够：1．用传递过来的对象调用computer方法完成运算
                             2．输出运算的结果
（4）设计一个测试类，调用UseCompute中的方法useCom来完成+-*/运算

2.分析以下需求，并用代码实现：
(1)统计每个单词出现的次数
(2)有如下字符串"If you want to change your fate I think you must come to the ujiuye to learn java"(用空格间隔)
(3)打印格式：
to=3
think=1
you=2
=========================================================
复习:
overload: 方法名一致 参数不一致  返回值无关
override: 子类和父类之间   方法名 参数 一致
          返回值 一致或者是其子类
          访问修饰  一致 或者不能比父类更严格
          不能跑出比父类更多的异常

final: 修饰类  类不能被继承  修饰方法 方法不能被重写
       修饰属性  属性不能被修改 表示常量

 接口: 相当于 一种特殊抽象类
 1. 接口不能写构造方法
 2. 接口所有方法都是抽象的  还会默认加一个 public abstract
 3. 接口中的属性都是常量    会默认添加 public static final
    jdk.1.8  支持实例方法（default /static）
 4. 接口不能被实例化
 5. 接口和接口之间 支持多继承   类和接口支持多实现

 抽象类和接口之间区别?    面试题

java常用设计模式:23种
创建型: 工厂  抽象工厂  单例模式  ....
结构型: 代理模式  桥接模式  适配器模式
行为型: 观察者模式  策略模式  迭代模式

单例模式:  一个类只有一个实例
步骤：1.构造方法私有化 2.对外提供公共方法返回一个对象(饿汉式和懒汉式)

枚举 java jdk 1.5支持的功能  相当于列举一些例子
类似于可以定义很多常量   如果定义多个枚举通过"," 隔开
枚举也有构造方法  访问修饰符只能是私有的(private)
枚举为什么比较适合实现单例模式   因为枚举跟类几乎是一致的
可以定义属性  定义方法 静态方法等.   只不过实例个数是有限制的
public enum  枚举名{
    枚举1,枚举2,枚举3
}
这里有三个枚举 等同于只能调用三次无参构造(只能有三个对象)

工厂模式:  创建对象最佳方式， 相当于把创建对象过程做了封装
这样可以将实例化对象的逻辑不对外共享， 对外提供一个工厂类
方便调用
a. 普通工厂模式: 建立一个工厂类， 实现一个方法对同一类的对象
进行实例化
b. 多工厂模式:  相当于普通工厂模式提升,提供了多个方法实现不同
对象实例化过程
c. 静态工厂模式: 相当于多工厂模式提升， 提供的多个方法通过static
修饰 这样不用创建实例， 可以直接调用

代理模式:  框架Spring  动态代理 和静态代理
           用于创建对象不是直接创建,而是由于一个代理对象帮我创建
           指定调用代理对象，它就会返回需要的目标对象
           为什么要使用代理模式 可以通过代理创建对象前后 做一些增强处理
           这样不仅不会影响程序的执行 还会增加新的功能

           创建之前 做一些事情  记录创建时间
           new B();
           创建之后 做一些事情   记录时间

观察者模式:  对象和对象之间存在1对多的依赖关系, 当我对1的一方
更新数据时，给我向依赖的多的一方 都会自动更新
应用场景: 微信公众号


String 字符串: 不是基本数据类型，是一种特殊的引用类型
一旦赋值 是不能改变的
数组和String 是不是原生类(基本数据类型)?


内存分类:
堆内存heap:又叫Java堆  用于存储对象
和数组这种类似于这对象(保存new出来的内容)
栈对象stack: 又叫Java栈 用于存储局部变量和基本类型和对象的引用(堆内存的地址)
方法区:  存储类的信息、常量、静态变量
常量池:  是方法区的一部分 主要用于存储常量
...

String s="abc"; 创建一个对象  底层实现 指向了 final修饰char数组
s指向的地址是可以改变   abc 由于是常量  保存常量池  不能改变
s="123";  创建123常量     然后s  只是指向了 常量中的新的常量
s="abc";    s  又只指向了 abc 常量
所以说想堆String 做大量修改 String类型效率是很低的

String str=new String("123");   创建了几个对象?   1个或者2个
2: new String()   常量池中的"123"
1: new String()   常量池如果已经存在123 就不需要创建
String str2="123";
str==str2  用于判断两者引用地址是否一致  false
str.equals(str2) 用于两者保存的值(常量池的值)   true

String常用方法:
length()  返回字符串的长度
charAt(下标)  返回指定位置的字符
indexOf("字符") 返回指定字符首次出现的位置   如果没有都返回-1
lastIndexOf("字符")  最后出现的位置
substring(begin,end)  截取指定位置的字符
split("")    通过指定字符分割成字符串数组
toLowerCase()   toUpperCase()    转小写 转大写

equals()  判断两个字符串的值是否一致
equalsIgnoreCase()  判断字符串的值是一致 不区分大小写
trim()   去除字符串的两端空格  中间的空格不受影响
getBytes()   通过字符串转换成字节数组
toCharArray()  通过字符串转换成字符数组
contains()    判断字符串是否包含指定字符  返回值 boolean
startWith("")  判断字符串是否以指定内容开头
endWith("")    判断字符串是否以指定内容结束
replaceAll("字符串1","字符串2") : 将字符串内容1 全部替换成内容2
concat("")  用于拼接字符串  类似于  ""+""















