复习:
异常:
Throwable  错误和异常 最大的父类
    error: 系统出现的问题   不能通过程序解决的问题
    Exception:
        检查性异常: 编译出错    异常要求必须处理
                    IOException   SQLException
                    FileNotFoundException   ParseException
        运行时异常: 编译不会出错    是程序员编程不合理造成
                    问题是可以避免的   异常机制可以不需要处理
                     NullPointException  ArrayIndexoutOfBoundsException
                     ClassCastException  除数不能为0异常
                     NumberFormatException

异常机制方式:
1. 抛出异常     在方法声明的部分  throws 对应类型异常

2. 捕获异常
try{
代码1
代码2
代码3
}catch(捕获异常类型 名称){  小  或者同级
}catch(捕获异常类型 名称){
}catch(捕获异常类型 名称){  大
}
try{}-catch(){}-finally{ 无论是否发生异常都会执行}

调试模式：
1. 设置断点
2. 单击甲壳虫
3. F7   下一步
4. 关闭调试窗口 单击红色方块
=============================================================
junit  测试框架
junit 精简版框架, 可以让你随便写一个方法   都是运行测试
(默认不支持Scanner)
1.  导入 junit-XXX.jar   (里面就是别人写好的java代码)
2.  定义一个类  随便写一个方法 只要在方法上面一个注解 便可运行
    方法不能有返回值  不能有参数   不能写static   只要写一个普通方法
    访问修饰符 必须是public
@Test      提供测试方法   加该注解  该方法才可以运行
@Before    会在测试方法运行之前执行
@After     会在测试方法运行之后执行

线程  集合 HashMap 底层原理  i/o 代码很多  反射  比较抽象 难
socket
集合: 底层实现类似于数组   用于存储一些系列数据
      相比数组  类型是可以不同，也可以让其相同
      长度不是固定的  所以相比数组更加灵活

集合的分类:
java.util.Collection 父接口
          List 子接口    List集合
          Set  子接口    Set集合
java.util.Map 接口       Map集合   和Collection 没有关系

1.List集合:  有序(有下标)  元素是可以重复
由于List是一个接口 无法实例化
常用实现类:
ArrayList:   数组实现   查询速度快  增删比较慢   线程不安全的  运行效率快
             扩容机制 初始长度是10   每次扩容方式增加1.5倍
LinkedList:  链表实现   查询速度慢  增删比较快   线程不安全的  运行效率快
             理论上没有长度限制  所以无需扩容
Vector:      数组实现   查询速度快  增删比较慢   线程安全的    运行效率慢

集合使用方式：
集合类型  名称=new 实现类();
名称.常用集合方法();

List常用方法:
add()  新增元素   ...
add(下标,元素)  在指定位置插入元素  其他元素会实现后移
set(下标,元素)  替换元素
get(下标)  获取元素
remove()   删除元素
contains() 判断集合中是否元素存在
isEmpty()  判断集合是否为空(元素是不是空 长度为0)
size()  集合长度   set  和map 都是一样的

集合遍历
a. 通过常规for
b. 增强for
   for(数据类型 临时变量:集合名){
   }
c. 迭代器遍历: 通过迭代器对象  判断是否存在下一个元素
               如果存在 就遍历出来  不存在则结束
Iterator  迭代器
hasNext():  判断 是否有下一个元素
next():     获取下一个元素


集合泛型: 表示java 参数化类型  保证集合的参数是指定类型
用于规定只能存储什么类型的值
集合类型<规定的数据类型>
List<Integer> list=new ArrayList<Integer>();
//jdk1.8之后 后面的泛型可以省略
List<Integer> list=new ArrayList();


2. LinkedList : 链表实现  比较适合增删 不适合查找
比较特殊 本身存在自己定义的方法  所以不能通过父类引用调用
自己的子类独有的方法
class A{
1  2  3
}
class B extendx A{
4  5  6
}
LinkedList 自己独有的方法
addFirst()   addLast()
getFirst()   getLast()
removeFirst()  removeLast()






