世界是由什么构成的?
化学家  分子
画家    颜色
分类    不同类别构成

植物
动物  脊椎   爬行  有足类  乌龟  蜥蜴
                   无足    蛇

类:  具有相同的特征的事物，抽象出来的概念
(特征:1.静态特征  特征:  颜色   品种  年龄  体重  姓名-->属性
      2.动态特征  行为:  吃  跑 叫 咬人   -------------->方法)
对象:  现实世界中客观存在的事物

类和对象之间的关系是什么?
类是对象的模板, 对象是类的实例？

java无数种数据类型 因为类可以定义无数种
int n;
类名 名称;

如何定义对象:
类名  名称=new 类名();
Scanner sc=new Scanner(System.in);
Dog  d=new Dog();
sc.next()  sc.nextInt()
对象名.属性
对象名.方法()


面向对象: 面向对象四大特性1. 抽象 2. 封装 3.继承  4.多态
抽象: 在现实世界中事物抽象出来，提取他们共同的特征(属性和方法)
形成一个类  这个过程属于抽象

封装:  将类中的属性赋予不同的访问权限(private 私有的)， 其他类不能直接访问,
只能通过类中提供的特定方法接口来访问, 提高程序安全性

如何定义一个方法
function aaa(aaa){
alert(aaa);
}
访问修饰符  返回值类型  方法名(数据类型 参数名,数据类型 参数名,...){
}
private String name
访问修饰符: 方法和属性都可以添加的内容  表示访问的权限
      private私有的  默认的  protected(受保护的)  public(公开的)
本类      √           √          √                √
同包                   √          √                √
子类                               √                √
其他(不是本类 不是同包 没有继承关系的类)             √

返回值类型:  方法执行结束 返回结果类型   同时使用return  对应的数据
             如果定义的是void   表示没有返回值类型   这时不用写return

方法名:   就是名称  只要命名规则  类似于定义变量名
参数:   形式参数(形参)  在方法定义的时候写的参数  数据类型 参数名
        实际参数(实参)  在调用方法的时候传入的实际的值

public void setAge(int abc){

}
Dog d=new Dog();
int a=123;
d.setAge(a);

java 变量
成员变量: 在类的里面 方法的外面定义的变量
局部变量: 在局部空间(方法 if  switch for )里面定义的变量属于局部变量

面试题: 局部变量和成员变量区别?
成员变量是有默认值的 所以说不赋初值 一样可以使用，
//整形变量 默认值都是0
//浮点型   默认值都是0.0
//char     默认值是 ''
//boolean  默认值 是false
//String、数组、对象  默认值是 null
局部变量不赋初值 无法使用

优先级不同:   通过同时存在  局部变量和成员变量 名称是相同的
        局部优先于成员

使用范围不同:    成员的范围 是整个类中都可以使用
                 局部的范围 再哪里定义 在哪里使用


public static void main(){
    int a;
    System.out.print(a);

    if(){
        int b=100;
    }
    for(int i=0;i>10;i++){
    }

}

