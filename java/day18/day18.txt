复习:
1.进程: 表示程序执行过程,包含了程序所持有的资源,
一般情况下一个程序只有一个进程
2.线程: 进程一部分,他表示程序某一项特定任务单元  所以说一个进程包含
无数先个线程

实现线程的方式:4种
1. 继承 Thread类   重写run() ---线程的执行逻辑
2. 实现Runnable接口   实现run()       常用的
   new Thread(Runnable类型对象,"名称").start()
3. 实现Callable接口   实现call()
FutureTask ft=new FutureTask(callable类型对象)
new Thread(ft,"名称").start()

callable和Runnable 区别?    面试题
1.callable 实现call()    Runnable 实现run()
2.callable 方法有返回值    Runnable 没有返回值
3.callable 方法有异常抛出    Runnable 没有异常抛出

4.线程池的方式 :  一个容器 事先保存了很多线程， 想使用时就可以
直接获取 这样的话就可以省去创建线程的时间    用完了线程还可以放回去
保证了线程池中线程的数量，如果访问量比较高  线程池数量不够
也可以让其创建更多的线程  线程长时间不用了 也可以自动回收
已空间换时间的方式 提高效率
    a. 可缓存线程池
    b. 可定长线程池
    c. 可周期定长线程池
    d. 单线程线程池

线程常用方法:
Thread.currentThread(): 表示获取当前线程,他是Thread类静态方法
start():启动一个线程会进入就绪状态, 当抢到CPU执行权 才会进入运
行状态  才开始调用run() 方法
setName/getName: 设置或者获取 线程名称

sleep和wait 区别?----------------面试题
sleep: 也是Thread类静态方法， 可以让线程进入阻塞状态, 时间过后
进入就绪状态,   只有再次抢到了CPU才会执行   后放弃本次CPU执行权
不会放弃对象锁
wait: 他是Object类的方法，  可以让线程进入阻塞状态  会释放对象锁
只有拥有对象锁的才可以调用wait() 否则会出现异常   进入阻塞状态的
线程必须通过notify 或者notifyAll 去唤醒  否则会一直处于等待池
notify: 唤醒随机一个处于等待池的线程
notifyAll: 唤醒全部处于等待池的线程

setPriority: 设置线程优先级(1-10)  默认值是5   优先级越高值越高
只有当两个线程同一个时间节点同时抢cpu 才会考虑到优先级
yield:  放弃本次CPU执行权  进入就绪状态(还可以能下一次竞争CPU还
可能被选中,  只是为了提供一种可能)

线程对象.join():  等待该线程对象执行结束后，在执行当前线程
isAlive() :  判断线程是否存活

sleep wait join:  使用时都会以出现检查性异常:终止异常

线程的状态: 5种  -------面试题
1.创建状态: 当使用new关键字创建线程时
2.就绪状态: 创建状态的线程一般调用了start() 就会进入就绪状态
只有抢到了CPU 才会进入运行状态  线程.run()不是开始 只是相当于
对象调用方法
3.运行状态: 当线程获取CPU 进入运行状态  直接运行run方法
4.阻塞状态: 线程运行过程中,由于各种原因进入阻塞状态
          a. 线程调用了sleep方法  进入睡眠
          b. 调用wait()方法  处于等待
          c. 线程调用了I/O上被阻塞的操作(Scanner 获取控制台数据System.in)
             该操作需要等到输入输出完成后执行其他操作
          d. 线程试图得到了一个锁，但是该锁被别的线程锁使用
             所以需要等待别的线程释放锁之后才可运行
          e. 线程在等待某一个触发条件(比如: t1.join  t1不执行结束不会运行当前线程)
5.死亡状态: 导致线程死亡可能有两个原因（1.老死的  2.病死的 3.自杀）
          a. run() 方法 正常运行到结束 则自然死亡
          b. 执行线程时,出现异常导致了终止run()
          c. 通过直接调用终止线程的方法结束

线程安全:  程序无论是多线程或者是单线程  数据的运行结果是一致的
StringBuffer HashTable...  内部都实现了同步锁

为了保证多个同时执行的时候数据还能是正确的（线程安全） 可以通过
线程同步来实现: synchronized 表示同步的意思

synchronized: 可以线程增加对象锁 可以修饰 代码块  修饰方法
synchronized 可以加三种锁
a. synchronized 修饰代码块
   synchronized(参数){ //参数就是对象锁                 对象锁

   }
b. synchronized修饰方法  表示锁住当前对象                 对象锁
   public synchronized void test(){
   }
c. synchronized修饰静态方法    表示锁住的是当前类的Class对象   类锁
   public static synchronized void test(){
   }

