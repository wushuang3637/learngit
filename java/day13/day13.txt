基础题
1.给定一个日期值，计算若干天数后的日期值
2.获得一个日期所在的周的星期几的日期，如要找出2002年2月3日所在周的星期一是几号
3.计算促销日期， 输入一个生产日期，在输入保质期时间，促销日期是在该商品过期日前两周的周三
  计算哪一天是促销日？

选做题
1. 模拟实现一个记录手机视频时长  每次视频10分钟   第二次累加上一次的时间
   结果如下: 通话时长    "10:15:12";
2. 模拟制作一个日历工具 输入 年  和月
    展示  该月的日期
   如 输入2020 年  12月
   一    二   三   四   五   六    日
         1     2   3     4    5    6
   7     8     9    10   11   12   13
   ...
==============================================================
   java高级: 集合  线程   IO  反射   socket
异常: 程序运行时,发生一些不正常事件，他会阻止程序按照程序员的
预期运行他会终止程序

异常的分类:
Throwable 是错误和异常的父类
1.错误  Error : 出现了错误程序员无法解决, 一般都属于系统的错误
java运行时 系统内部出现的错误和资源耗尽等错误 并不能通过程序解决
比如:内存溢出
2.异常  Exception :  首先分两个子类
         a.检查性异常:  编译就报错,异常机制必须要处理
         比如: SQLException  IOException
               ParseException FileNotFoundException等
         b.运行时异常:   编译不会报错, 当你运行时才有可能出错
         本身是由于程序员编程不合理造成 所以说是可以提前避免的
         java 异常机制针对这类的异常 可以不用处理
         比如: NullPoingException   IndexOutofBoundsException
               ClassCastException    NumberFormatException 等

3. 异常处理方式
1. 抛出异常: 使用关键词 throws  写在方法的声明中
             目的将异常抛出，抛给上一级，谁调用这个方法 谁就是上一级
            public void test() throws 对应类型的异常{
            }
2. 捕获异常:  通过捕获异常的步骤 去控制程序的流程
              try{
                  //写 可能出现异常的代码
              }catch(捕获的异常类型){
                  //成功捕获该类的异常之后 执行的处理
              }
如果通过idea  实现程序调试  可以观察程序的运行过程
又称debug模式
步骤:
1. 设置断点   点击代码前面行号    调用程序从哪里开始运行
2. 开启debug模式  进入debug界面   点击idea 右上角 找到甲壳虫
3. 通过F7 单步跳入   F9 恢复程序 进入下一个断点 如果没有下一个断点
直接运行到结束
4. 通过快捷键观察 程序运行过程 和变量的结果
5. 关闭debug模式    单击红色方块


try-catch  中  catch可以编写多个
try{
}catch(异常1){
}catch(异常2){
}catch(异常3){
}
异常1-3  需要从小的范围  依次写到大的范围
不能由大范围写到小范围


try-catch-finally
try{
可能出现的异常代码
}catch(捕获的类型){
    错误的信息
}finally{
    无论是否出现异常  一定会执行
    //  关闭资源   结束程序 一些收尾工作
}

try-catch  连用
try-catch-fianlly 连用
try-finally 连用

3. 自定义异常: (首先可以新建一个异常类)
使用throw 抛出自定义的异常  写在方法的  内部



